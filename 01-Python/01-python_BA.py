# -*- coding: utf-8 -*-
"""Урок 1. Python.  Повторяем основы

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SSD6PxSFGh7z_yjFMx-pHLeKn7DuyaVX

# Базовые элементы Python
## Pandas
- некий Excell для Python но более продвинутый
- построена на основе Датафреймов
- загрузка данных
- манипуляции с данными
- агрегирование

## Mattlotlib и Seaborn
- для построения научных графиков
- визуализация данных
- разведочный анализ
- построение графиков

## Scipy
- стат. анализ и проверка статистических гипотез
- выявление важности факторов

## Numpy
- линейная алгебра
- матрицы и векторы
- мера расстояния

## Scikit-learn
- предобратобтка данных
- построение предиктивных ML-моделей
- широко используется в промышленности и науки

## Feature Engineering
- повышения качества ML-моделей

### 1. Переменные

**Переменные** можем рассмартивать как контейнер, который хранит часть **информации** в виде числел или текста.
"""

# Сохраним в переменную число и выведем её значение на экран
a = 14
print(a)

# Аналогчино сделаем с текстом
b = 'Здесь записан некоторый текст'
print(b)

"""### 2. Действия с переменными и типы данных"""

# Просуммируем переменные
a = 14
c = 3
d = a + c
print(d)

# Либо можно сделать так
print(a+c)

# Можно ли изменить значение переменной?
a = 18
print(a)

# Равенство переменных
e = a
print(e)

# Типы данных в Python

# Integer (целочисленные)
a = 1
print(a)
print(type(a))

# Float (числа с плавающей точкой)
a = 5.0
print(a)
print(type(a))

# Boolean (логический тип - ИСТИНА/ЛОЖЬ)
a = True
print(a)
print(type(a))

# String (строковый тип)
a = "7" 
print(a)
print(type(a))

# Обращайте внимание на операции с разными типами данных

x = 15
y = 4
z = x + y
print(z)
print(type(z))

# string variables
x = "1"
y = "2"
z = x + y
print(z)
print(type(z))

"""### 3. Списки
**Списки** очень полезны в программировании. Их тоже можно сравнить с контейнерами, но с разными отсеками, где каждый отсек хранит другую переменную.
"""

# Простой массив из целых чисел в виде списка в Python
a = [1,2,3]
print(a)

# Можно хранить переменные разных типов
b =  ["Text", 4, 2.5]
print(b)

# Использование индексов списков для получения определенных элементов массива

# Как вывести каждый элемент списка отдельно?
print(a[0])
print(a[1])
print(a[2])
# Индексы в списках нумеруются числами, начиная с 0. Т.е. список, в котором 3 элемента, имеет индекса 0, 1 и 2.

# Добавление большего количества элементов в список

a.append(4)
print(a)

# Определение количества элементов в списке
print(len(a))

# Изменение значения элемента в списке

a[3] = 5
print(a)

# Нарезка списков-это метод, используемый для получения элементов из различных индексов, до них или между ними

# Обратите внимание:

#a[start:stop]  # нарезка списка начинается с элемента start до элемента stop-1
#a[start:]      # нарезка списка начинается с элемента start до последнего элемента в массиве
#a[:stop]       # нарезка списка начинается с начального элемента до элемента stop-1
#a[:]           # копия целого списка

print("Все элементы: ", a[:])
print("Все элементы с 3й позиции до последнего: ", a[2:])
print("Все элементы между 2й и 4й позицией: ", a[1:3])
print("Все элементы, кроме последнего", a[:-1])

"""## 4. Словари
**Словари** это объекты, которые хранят пару значений "ключ:значение".
"""

# Создаем словарь
country_info = {"name": "Japan",
        "capital": "Tokyo"}

print(country_info)
print(country_info["name"])
print(country_info["capital"])

# Мы можем сохранить несколько переменных и их значений и добавлять новую информацию в словарь

country_info['population'] = '126.8M'
print(country_info)

# Также просто мы можем менять значение переменных

country_info['population'] = '100M'
print(country_info)

# Значения могут быть любых типов данных - можем поместить в значение Список

country_info['regions'] = ['Hokkaido', 'Tohoku', 'Kanto', 'Chubu', 'Kinki', 'Chugoku', 'Shikoku', 'Kyushu-Okinawa']
print(country_info)

# Можно также создавть вложенные словари

country_info['health'] = {"life_expectancy": 84.1, "birth_rate": 1.44}
print(country_info)

print(country_info)

# Доступ к данным вложенного словаря

country_info['health']['life_expectancy']

country_info.values()

"""# 5. Операторы условий - If & Else

Операторы if окажутся неоценимыми в программировании при работе с ситуациями, когда необходимо проводить вычисления в зависимости от разных условий.
"""

# Использование оператора if

x = 19

if x < 10:
    print("меньше 10")
else:
  print("больше или равно 10")

x = 29

if x < 10:
    print("меньше 10")
elif x > 10 and x <= 19:
    print("больше 10, но меньше 20")
else:
    print("больше или равно 20")

# Использование логических значений операторов условий

a = True
if a:
  print("утверждение верное")

"""# 6. Циклы

Циклы-это еще один бесценный инструмент в программировании, давайте рассмотрим несколько способов реализации циклов в Python
"""

# Использование функции range

print(list(range(5)))

# Либо так

print(list(range(1,5)))

for i in range(0,5):
  print(i)

# С помощью циклов в питоне можно напрямую перебирать элементы в списке

items = ['a','b', 'c', 'd']
for item in items:
  print(item)

# Выберем из списка только цифры
lst = ['Товар1', 18, 'Товар2', 99.99]
numeric_list = []
for i in lst:
  if type(i) != str:
    numeric_list.append(i)
print(numeric_list)

# Увеличение значения переменных в цикле и сохранение их в списке

x = 0
collecting_values_of_x = []

items = ['a','b', 'c', 'd']
for item in items:
  x += 1
  print(x, item)
  collecting_values_of_x.append(x)

print(collecting_values_of_x)

# Реализация циклов с помощью оператора While

x = 0
while x < 5:
    x += 1
    print(x)

x = 0
while True:
    if x == 5:
      break
    x += 1
    print(x)

"""# 7. Функции

**Функции** чрезвычайно полезны при создании фрагментов кода, которые вы хотите вызывать или использовать несколько раз
"""

# Простая функция для возврата площади круга

def areaCircle(radius):
  area = 3.14 * (radius**2)
  return area

areaCircle(2)

# Более сложные варианты функций - объем цилиндра

def volumeCylinder(radius, height):
  volume = 3.14 * radius**2 * height
  return volume

volumeCylinder(radius = 5, height = 6)

# Функции с дефолтными аргументами

def volumeCylinder(radius, height = 3):
  volume = 3.14 * radius**2 * height
  return volume

volumeCylinder(5)

# при наличие дефолтных значнения, можно указывать свои
volumeCylinder(5,10)