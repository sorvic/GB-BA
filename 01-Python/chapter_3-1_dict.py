# СПИСОК (list) - упорядоченная изменяемая коллекция объектов
# КОРТЕЖ (set) - упорядоченная неизменяемая коллекция объектов
# СЛОВАРЬ (dict) - неупорядоченное множество пар ключ/значение
# МНОЖЕСТВО (tuple) - неупорядоченный набор неповторяющихся объектов

# СЛОВАРЬ (dict)
# часто их называют ассоциативными массивами
# - каждая запись - это пара "ключ: значение"
# - подобно спискам можно добавлять и удалять значения
# - это неупорядоченная коллекция данных, отсортировать можно
# функцией sorted()
# - Метод items позволяет организовать итерации по записям в словаре
# Возвращает 2 переменные цикла - ключ и его значение
# - При обращение к несуществующему ключу - генерируется исключение KeyError
# - Чтобы избежать ошибки используют метод setdefault

person3 = { 'Name': 'Ford Prefect',
            'Gender': 'Male',
            'Occupation': 'Researcher',
            'Home Planet': 'Betelgeuse Seven' }
person3
person3['Name'] # Доступ к данным по ключу (а не по индексу как в словорях)
person3['Age'] = 33 # Добавление новой пары "ключ: значение"

found = {}
found
found['a'] = 0
found['e'] = 0
found['i'] = 0
found['o'] = 0
found['u'] = 0
found

# можем прибавлять к значению в словаре
found['e'] = found['e'] + 1
found['e'] += 1
found

# Если пройтись циклом for по Словарю - то он выдаст список "ключей"
for kv in found:
    print(kv)

for k in found:
    print(k, found[k]) # Чтобы получить значение - добавим в вывод по ключу

# sorted() - позволяет отсортировать Словарь по алфавиту
for k in sorted(found):
    print(k, found[k])

# Метод items() возвращает список пар "ключ-значение"
for k, v in found.items():
    print(k, v)


# Инициализация ключа "на ходу"
fruits = {}
fruits['apples'] = 10
'apples' in fruits # консоль даст ответ Ttue - так как ключ инициализирован
if 'bananas' in fruits:
    fruits['bananas'] += 1
else: # обходим ошибку о ненайленном ключе - если его нет - то инициализируем его со значением 1
    fruits['bananas'] = 1
fruits

# if-else - можно записать иначе
# # ТЕРНАРНЫЙ оператор
# x = 10 if y > 3 else 20
# присвоит "x" значение 10, если "y" больше 3, и 20 - в противном случае

# not in - проверяем входит ли данное значение и если нет - то выполняем дейсвтия
# ЧАСТО используется для инициализации с начальным значение ноль
if 'pears' not in fruits:
    fruits['pears'] = 0
fruits
fruits['pears'] += 1
fruits

# Метод setdefault - вполняет тоже что и выше - но короче
# заменяет проверку на существование ключа в Словаре
# позволет добавлять и инициализировать значение в Словарь
fruits.setdefault('pears', 0)
fruits['pears'] += 1
fruits
