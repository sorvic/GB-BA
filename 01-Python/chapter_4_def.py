
# ФУНКЦИИ
# - Возьмите несколько строк кода, дайте им имя - и у вас Функция
# - Возьмите коллекцию Функций, сохраните в файле - у вас готовый Модуль
# - В функции используются два ключевых слова
# "def" - присваивает имя
# и "return" - возвращает значение из функции
# - Аннотации функций могут использоваться для документирования
# типов аргументов и возвращаемого значения функции
# - Любому аргументу функции можно назначить значение по умолчанию
# в строке определения def
# - Кроме приваивания аргументов по позициям, можно использовать
# присваивание по ключам

# создание Функции
def search4vowels():
    """Выводит гласные, найденные в указанном слове"""
    vowels = set('aeiou')
    word = input('Provide a word to search for vowels: ')
    found = vowels.intersection(set(word))
    for vowel in found:
        print(vowel)


# вызов Функции
search4vowels()

# создание Функции с принимаемым Аргументом
def search4vowels(word):
    """Выводит гласные, найденные в указанном слове"""
    vowels = set('aeiou')
    found = vowels.intersection(set(word))
    for vowel in found:
        print(vowel)


# создание Функции с принимаемым Аргументом и возвратом значения
def search4vowels(word):
    """Возвращает булево значение в зависимости от
    присутствия любых гласных"""
    vowels = set('aeiou')
    found = vowels.intersection(set(word))

    # выводим проверку - есть у нас результат функции или нет
    return bool(found)
    # bool() - выводит True - если значение есть
    # False - значения 0, пробел, пустая строка или список, None

# вызов Функции
search4vowels('sky')

# Если нужно вернуть несколько значений, то единственный способ
# - упаковать значения в структуру данных
def search4vowels(word):
    """Выводит гласные, найденные в указанном слове"""
    vowels = set('aeiou')
    #found = vowels.intersection(set(word))
    #return found
    # вместо двух строчек выше - можно сразу вернуть результат вычесления
    return vowels.intersection(set(word))

search4vowels('sky') # выведет - set()
# set() - так программа обозначает пусто множество,
# потому что {} - это пустой словарь
search4vowels('Hitcher') # выведет - {'e', 'i'}

# Аннотации к функциям (добавлены с Python 3)
# не являются обязательными
# - к каждому аргументы черед двоеточие
# - тип возвращаемого значения через тире со стрелкой
def search4vowels(word:str) -> set:
    """Выводит гласные, найденные в указанном слове"""
    vowels = set('aeiou')
    return vowels.intersection(set(word))

# Вывод документации по созданной функции
help(search4vowels)


# Создадим новую функцию, которая будет искать слова во фразе
def search4letters (phrase:str, letters:str) -> set:
    """Возвращает множество букв из 'letters', найденыых
    в указанной фразе"""
    return set(letters).intersection(set(phrase))
# intersection() - ищет пересенчение в 2-ух множествах

search4letters('hitch-hiker', 'aeiou')
search4letters('galaxy', 'xyz')
search4letters('life, the iniverse, and everyhing', 'o')

# Задание значения по умолчанию
def search4letters (phrase:str, letters:str='aeiou') -> set:
    """Возвращает множество букв из 'letters', найденыых
    в указанной фразе"""
    return set(letters).intersection(set(phrase))

search4letters('hitch-hiker')
search4letters('hitch-hiker', 'aeiou')

# Именованные аргументы - задания аргументов функции по их имени
search4letters(letters='xyz', phrase='galaxy')
search4letters('galaxy', 'xyz')

# Модуль - это функции, сохраненные в отдельный файл
# import - позволяет импортировать модуль к себе в код
# Интерпретатор ишет модуль в 3-ех местах:
# - текущий рабочий каталог
# - каталоги хранилища сторонних пакетов (хранилище большинства
# модулей, установленных или созданных вами)
# - каталоги стандартной библиотеки

# Мы можем создать свой модуль и добавить его в каталог
# хранилища сторонних пакетов с помощью setuptools

'''
Для создания собственного модуля в каталоге хранения пакетов
необходмо создать 2 файла setup.py и readme.txt (может быть пустым).

В Win (вводим в коммандной строке): py -3 setup.py sdist
В Unix-пообных системах: python3 setup.py sdist

Все 3 файла будут упакованы в один файл дистрибутива. Этот файл пригоден
для установки, в нем находится исходный код модуля.
Вы найдете новый файл архива в впаке dist, созданной внутри рабочей папки

После этого модуль можно установить при помощи "pip"
В Win (вводим в коммандной строке): py -3 -m pip install vsearch-1.0.zip
В Unix-пообных системах: python3 -m pip install vsearch-1.0.tar.gz
'''

# Созданным модулем можно делиться:
# 1) Неофициально - просто скинув, выложив кому-то
# 2) Официально - выложив на сайт: https://pypi.org/





# ---
# ТЕСТИРОВАНИЕ
# pytest - ФРЕЙМВОРК] для тестирования программ на Python
# К нему можно добавлять плагины:
# - pep8 - плагин для проверка на соответствия кода PEP8

'''
УСТАНОВКА 
В Win (вводим в коммандной строке): py -3 m pip install pytest
В Unix-пообных системах: python3 -m pip install pytest

установка плагина PEP8
В Win (вводим в коммандной строке): py -3 m pip install pytest-pep8
В Unix-пообных системах: python3 -m pip install pytest-pep8
'''
# Похоже в последних версиях pytest плагин pep8 не поддерживается,
# поэтому используем flake8
# python3 -m pip install pytest-pep8-flake8





# ---
# Ссылка и копирование объекта
def double(arg):
    print('Before: ', arg)
    arg = arg * 2
    print('After: ', arg)


def change(arg):
    print('Before: ', arg)
    arg.append('More data')
    print('After: ', arg)

# аргументы передаются по значению, первоначальный аргумент не меняется
num = 10
double(num)
num
saying = 'Hello'
double(saying)
saying

# аргументы передаются по значению, первоначальный аргумент НЕ меняется
numbers = [42, 256, 16]
double(numbers)
numbers # вывод - [42, 256, 16]

# аргументы передаются по ссылке, первоначальный аргумент МЕНЯЕТСЯ
change(numbers)
numbers # вывод - [42, 256, 16, 'More data']

# Семантика вызова функции отличается в зависимости от передаваемого аргумента
# Если передается неизменяемая переменная (строка, целое чсило, кортежи) - то
# происходит передача аргумента по значению
# Если передается изменяемая переменная (списки, словари, множества) - то
# происходит передача аргумента по по ссылке
# НО если в функции есть ОПЕРатоР ПРИСВАИВАНИЯ "arg = arg * 2" - то он
# создает копию объекта, поэтому в примере выше изменяемый объект список
# остался неизменным