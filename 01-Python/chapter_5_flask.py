# FLASK
# - представляет собой коллекцию модулей,
# которые помогают создавать серверные веб-приложения.

# Импортируем класс Flask из модуля flask
from flask import Flask

# Создаем объект типа Flask и присваиваем его переменной app
app = Flask(__name__)
# __name__ определяется интерпретатором и
# устанавливается равным имени текущего модуля

# ДЕКОРАТОР функции - настраивает поведеение
# функции БЕЗ изменения кода самой функции
# (то есть функция становится декорированной)
@app.route('/')
# декоратор route - позволяет связать веб-путь URL с нашей функцией
def hello() -> str:
    return 'Hello world from Flask'

# Flask в переменной app запускает веб-сервер, методом run
app.run()

'''
УСТАНОВКА Flask
В Win (вводим в коммандной строке): py -3 -m pip install flask
В Unix-пообных системах: sudo -H python3 -m pip install flask 

ЗАПУСК кода
В Win (вводим в коммандной строке): py -3 hello_flask.py
В Unix-пообных системах: python3 hello_flask.py

После запуска можно вбить в браузере - http://127.0.0.1:5000/
'''

# ШАБЛОНЫ HTML
# - позволяют применять ООП-понятия и повторное использование
# при создании текстовых данных, таких как веб-странички
# - при внесении изменения в базовый шаблон - меняется
# код и в наследуемых страничках

'''
HTTP-коды состояния
Информационные 100 - 199 (детали работы сервера)
Успешные 200 - 299 (сервер получил, понял и обработал запрос)
Перенаправления 300 - 399 (запрос может быть обработан в каком-то дргуом месте)
Клиентские ошибки 400 - 499 (сервер не смог понять и обработать запрос)
Серверные ошибки 500 - 599
'''

# Jinja2 - механиз текстовых шаблонов для отображения
# html-страниц внутри веб-приложения